TODO: 
- Prueba una consulta dns 
??? 

Redefinir con el tipo de dato

push    4A0h
push    offset unk_40D450 // Pone en el stack algo que estaba en el buffer de la app ( El tamaño se pushea antes) 

/Code/

buff = idaapi.get_many_bytes(0x40D450, 0x4a0)
key1 = 0x91273433
key2 = 0x73659071
import struct
positions = len(buff)>>2
result = ""
for i in xrange(positions):
    print i
    val = struct.unpack( "<L", buff[i*4:i*4+4])[0]
    print val
    if i & 1 == 0:
        result += struct.pack("<L", key1 ^ val)
    else:
        result += struct.pack("<L", key2 ^ val)
print repr(result)


a = """'kernel32.dll\x00GetProcAddress\x00GetModuleHandleW\x00FindNextFileW\x00FindClose\x00MoveFileW\x00GetFileSizeEx\x00GetModuleFileNameW\x00GetFileAttributesW\x00ExitProcess\x00GetCommandLineW\x00GetComputerNameW\x00GetComputerNameA\x00CreateMutexW\x00lstrlenW\x00lstrlenA\x00GetCurrentProcess\x00WaitForSingleObject\x00GetLogicalDrives\x00GetTickCount\x00DeleteFileW\x00WideCharToMultiByte\x00InitializeCriticalSectionAndSpinCount\x00Sleep\x00LeaveCriticalSection\x00ReadFile\x00CreateFileW\x00OpenMutexW\x00EnterCriticalSection\x00WaitForMultipleObjects\x00lstrcmpiW\x00DeleteCriticalSection\x00ReleaseMutex\x00CloseHandle\x00GetVersion\x00CreateThread\x00ExpandEnvironmentStringsW\x00QueryPerformanceCounter\x00QueryPerformanceFrequency\x00GetCurrentProcessId\x00SetFileAttributesW\x00GetVolumeInformationW\x00WriteFile\x00SetFilePointerEx\x00SetEndOfFile\x00FindFirstFileW\x00GetProcessHeap\x00HeapReAlloc\x00HeapAlloc\x00HeapFree\x00CreatePipe\x00SetHandleInformation\x00CreateProcessW\x00CompareStringW\x00CompareStringA\x00\x00advapi32.dll\x00RegOpenKeyExW\x00RegQueryValueExW\x00RegSetValueExW\x00RegCloseKey\x00OpenProcessToken\x00GetTokenInformation\x00\x00user32.dll\x00SystemParametersInfoW\x00\x00Shell32.dll\x00ShellExecuteExW\x00\x00mpr.dll\x00WNetCloseEnum\x00WNetOpenEnumW\x00WNetEnumResourceW\x00\x00ws2_32.dll\x00WSAStartup\x00socket\x00send\x00recv\x00connect\x00closesocket\x00gethostbyname\x00ntohl\x00htonl\x00htons\x00\x00\x00\x00\xc3'"""
b = a.split("\x00\x00")[:-2]
for lib in b:
    names = lib.split("\x00")
    print "Library: %s" % names[0]
    for name in names[1:]:
        print "---------> " + name
		
Library: 'kernel32.dll
---------> GetProcAddress
---------> GetModuleHandleW
---------> FindNextFileW
---------> FindClose
---------> MoveFileW
---------> GetFileSizeEx
---------> GetModuleFileNameW
---------> GetFileAttributesW
---------> ExitProcess
---------> GetCommandLineW
---------> GetComputerNameW
---------> GetComputerNameA
---------> CreateMutexW
---------> lstrlenW
---------> lstrlenA
---------> GetCurrentProcess
---------> WaitForSingleObject
---------> GetLogicalDrives
---------> GetTickCount
---------> DeleteFileW
---------> WideCharToMultiByte
---------> InitializeCriticalSectionAndSpinCount
---------> Sleep
---------> LeaveCriticalSection
---------> ReadFile
---------> CreateFileW
---------> OpenMutexW
---------> EnterCriticalSection
---------> WaitForMultipleObjects
---------> lstrcmpiW
---------> DeleteCriticalSection
---------> ReleaseMutex
---------> CloseHandle
---------> GetVersion
---------> CreateThread
---------> ExpandEnvironmentStringsW
---------> QueryPerformanceCounter
---------> QueryPerformanceFrequency
---------> GetCurrentProcessId
---------> SetFileAttributesW
---------> GetVolumeInformationW
---------> WriteFile
---------> SetFilePointerEx
---------> SetEndOfFile
---------> FindFirstFileW
---------> GetProcessHeap
---------> HeapReAlloc
---------> HeapAlloc
---------> HeapFree
---------> CreatePipe
---------> SetHandleInformation
---------> CreateProcessW
---------> CompareStringW
---------> CompareStringA
Library: advapi32.dll
---------> RegOpenKeyExW
---------> RegQueryValueExW
---------> RegSetValueExW
---------> RegCloseKey
---------> OpenProcessToken
---------> GetTokenInformation
Library: user32.dll
---------> SystemParametersInfoW
Library: Shell32.dll
---------> ShellExecuteExW
Library: mpr.dll
---------> WNetCloseEnum
---------> WNetOpenEnumW
---------> WNetEnumResourceW
Library: ws2_32.dll
---------> WSAStartup
---------> socket
---------> send
---------> recv
---------> connect
---------> closesocket
---------> gethostbyname
---------> ntohl
---------> htonl
---------> htons

InitializeCriticalSectionAndSpinCount:
Inicializa un objeto de sección crítica y establece el recuento de giros para la sección crítica. Cuando un hilo intenta adquirir una sección crítica que está bloqueada, el hilo gira : entra en un bucle que itera los tiempos de conteo de giros, verificando si se libera el bloqueo. Si el bloqueo no se libera antes de que finalice el bucle, el hilo se pone en suspensión para esperar a que se libere el bloqueo.


GetProcessHeap function
Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions.



