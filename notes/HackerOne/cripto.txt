si dos frases se cifran con la misma key en xor cipher
haciendo un xor entre los dos textos encriptados obtenemos el xor del texto plano
cancelando la key

para los block ciphers
si encontramos el tamaño de los bloques podemos ingresar un dato
que luego cree un bloque con la info que queremos
admin=0;
username
=padding
admin=1;
luego tomamos el ultimo bloque y lo reemplazamos por el primero
y se desencripta como una cookie de admin

FIRST encrypt THEN mac

PADDING ORACLE ATTACK
Padding oracle? one byte cause the flipping of one in the next block
so we need to find which is
Probando las 255 posibilidades encontramos una que no nos da padding error y setea el byte final a 0x01
Despues hacemos un xor con 0x03 para que el padding final sea 0x02 y repetimos el proceso

Mitigation
MACing your data after encryption

Hash attacks
You can add data to the hash if you know the padding
it depends on the algorithm
MD5: http://skullsecurity.org/blog/2012/everithing-you-need-to-know-about-hash-length-extension-attacks
SHA1: https://blog.whitehatsec.com/hash-length-extension-attacks

Mitigation
HMAC que hashea de nuevo el hash de la key y el mensaje

Repitiendo los datos que se encriptan, podemos saber si se usa ECB (blocks)
donde cada bloque se encripta por separado
Colocando 47 veces la 'A' estamos seguros que dos bloques se van a repetir
si es que se usa un block size de 16 bytes (128 bits) o menos

Para saber el block size ponemos una 'B' en el medio
y vemos el numero de bytes que cambian, ese es el block size

Para saber donde esta ubicado nuestra data
el numero de caracteres que podemos cambiar al comienzo del payload es el offset desde el inicio del string encriptado
el numero que podemos cambiar al final es el offset desde el final

Padding Oracles solo sirven en CBC mode
Necesitas poder manipular los datos, si hay HMAC fuiste

Tambien se debe validar el HMAC antes de desencriptar
porque o sino se puede encontrar el padding

Para detectar Padding Oracles se explota con una extension
probar las 256 posibilidades para el ultimo byte del anteultimo blocke
no habra mas de dos valores que te den errores distintos al padding error

Tool Padbuster
link http://blog.gdssecurity.com/labs/2010/9/14/automated-padding-oracle-attacks-with-padbuster.html

NO diseñar protocolos de encriptacion
Keyczar and CaCl (Networking and Crypto library) provide high-level APIs for crypto

con datos en movimiento usar TLS (o sea SSL)
con datos en reposo usar PGP

No MAC-then-Encrypt
no usar hashes en vez de MACs
no reusar key-IV o key-nonce
nunca usar ECB

Password Storage
Use BCrypt to store pwd on the server
Dont use MD5 or SHA for pwd
PBKDF1 si
Salting
SCrypt usa mucha rmam a proposito
Recommendation: SHA256 in PBKDF2 con per-user salt con 10000 rounds
if not BCrypt



